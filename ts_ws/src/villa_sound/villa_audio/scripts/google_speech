#!/usr/bin/python
from __future__ import division
import threading
import google
from std_srvs.srv import SetBool, SetBoolResponse
from google.cloud import speech
from google.cloud.speech import enums
from google.cloud.speech import types
from villa_audio import SharedMicrophoneStream, audio_stream
import rospy
from std_msgs.msg import String
from villa_audio.srv import RequestSoundTranscript, RequestSoundTranscriptResponse, AddHintPhrasesRequest, \
    AddHintPhrasesResponse, AddHintPhrases

from threading import Event

RATE = 16000
CHUNK = int(RATE / 10)  # 100ms


class StreamingTranscriber:
    def __init__(self, stream_type, context_phrases):
        self.base_hint_phrases = set(context_phrases)
        self.registered_phrases = set()
        self.streaming_config = self._create_config(list(self.base_hint_phrases))

        # Init Google Speech.
        self.speech_client = speech.SpeechClient()
        self.stream_type = stream_type

        self.should_stop_running = False
        self.should_start_running = Event()
        self.stopped = Event()
        self.running = False
        self._runner_thread = threading.Thread(target=self.__run_loop)
        self._runner_thread.start()

        self.heard_transcript_handler = None

    def _create_config(self, hint_phrases):
        context = types.SpeechContext(phrases=hint_phrases)
        config = types.RecognitionConfig(
            encoding=enums.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=RATE,
            language_code="en-US", max_alternatives=1, speech_contexts=[context])
        return types.StreamingRecognitionConfig(
            config=config,
            interim_results=True)

    def register_hints(self, hint_phrases):
        self.registered_phrases = self.registered_phrases.union(set(hint_phrases))
        all_phrases = self.base_hint_phrases.union(self.registered_phrases)
        self.streaming_config = self._create_config(list(all_phrases))

    def deregister_hints(self, hint_phrases):
        self.registered_phrases = self.registered_phrases.difference(set(hint_phrases))
        all_phrases = self.base_hint_phrases.union(self.registered_phrases)
        self.streaming_config = self._create_config(list(all_phrases))

    def __run_loop(self):
        while not rospy.is_shutdown():
            # Let people know we actually stopped
            self.stopped.set()
            # Sleep until we get a signal to start, then clear the signal so we don't use it twice accidentally
            self.should_start_running.wait()
            self.should_start_running.clear()
            self.running = True
            self.should_stop_running = False
            self.responses = None
            while not self.should_stop_running and not rospy.is_shutdown():
                try:
                    with self.stream_type(RATE, CHUNK) as stream:
                        audio_generator = stream.generator()
                        requests = (speech.types.StreamingRecognizeRequest(audio_content=content)
                                    for content in audio_generator)
                        self.responses = self.speech_client.streaming_recognize(self.streaming_config, requests)
                        self.__processing_loop(self.responses)
                except google.api_core.exceptions.DeadlineExceeded as e:
                    print "Google API buffer limit reached. Beginning new API call..."
                except google.api_core.exceptions.OutOfRange as e:
                    print "No audio data is arriving, so call timed out. Restarting API call..."
                except google.api_core.exceptions.Cancelled as e:
                    print "Cancelling at request"
                except Exception as e:
                    print "Unexpected exception occurred"
                    print e
                    print e.message
                # If we didn't yet open the streams
                if self.responses:
                    self.responses.cancel()
            self.running = False

    def stop(self):
        # The processing loops will check this flag
        self.should_stop_running = True
        if self.responses:
            # And we'll also tell the current connection to Google to die
            self.responses.cancel()
        # Block until we have actually stopped
        self.stopped.clear()
        self.stopped.wait()
        self.stopped.clear()

    def request_start(self):
        # Raise an event. The worker thread will be released
        self.should_start_running.set()

    def __processing_loop(self, responses):
        """Iterates through server responses and prints them.
        The responses passed is a generator that will block until a response
        is provided by the server.
        Each response may contain multiple results, and each result may contain
        multiple alternatives; for details, see https://goo.gl/tjCPAU.  Here we
        print only the transcription for the top alternative of the top result.
        """
        for response in responses:
            if rospy.is_shutdown() or self.should_stop_running:
                break
            if not response.results:
                continue

            # The `results` list is consecutive. For streaming, we only care about
            # the first result being considered, since once it's `is_final`, it
            # moves on to considering the next utterance.
            result = response.results[0]
            if not result.alternatives or not result.is_final:
                continue

            # Display the transcription of the top alternative.
            top_alt = result.alternatives[0]
            transcript = top_alt.transcript
            if self.heard_transcript_handler:
                self.heard_transcript_handler(transcript, top_alt.confidence)


class StreamingTranscriberRosWrapper:
    def __init__(self, transcriber):
        self.streaming_transcriber = transcriber
        self.streaming_transcriber.heard_transcript_handler = self.transcript_handler
        self.pub = rospy.Publisher('~transcripts', String, queue_size=1)
        # TODO: Put a mutex around each of the services. Things will break if you call them simultaneously
        self.request_service = rospy.Service('~request_sound_transcript', RequestSoundTranscript,
                                             self.handle_sound_transcript_request, buff_size=1)
        self.add_hints_service = rospy.Service("~add_hint_phrases", AddHintPhrases, self.add_hint_phrases, buff_size=1)

        self.start_stop_srv = rospy.Service('~set_transcribing', SetBool, self.set_transcribing, buff_size=1)

        self.last_transcript = None
        self.heard_transcript_event = Event()

    def add_hint_phrases(self, req):
        was_running = self.streaming_transcriber.running
        self.streaming_transcriber.register_hints(req.hint_phrases)
        # Changing these requires a restart
        # We'll only spin up again if we were running in the first place
        if was_running:
            self.streaming_transcriber.stop()
            self.streaming_transcriber.request_start()
        return AddHintPhrasesResponse()

    def set_transcribing(self, req):
        if req.data is False:
            self.streaming_transcriber.stop()
        else:
            self.streaming_transcriber.request_start()
        return SetBoolResponse(True, "")

    def handle_sound_transcript_request(self, req):
        res = RequestSoundTranscriptResponse()
        was_running = self.streaming_transcriber.running
        # If we're not already running, start
        if not was_running:
            # Go ahead and register before we start
            self.streaming_transcriber.register_hints(req.hint_phrases)
            self.streaming_transcriber.request_start()
        else:
            # If there are hint phrases, we have to restart
            if len(req.hint_phrases) > 0:
                self.streaming_transcriber.register_hints(req.hint_phrases)
                self.streaming_transcriber.stop()
                self.streaming_transcriber.request_start()
        self.last_transcript = ""
        heard_transcript = self.heard_transcript_event.wait(req.timeout)
        res.isGood = False
        res.utterance = ""
        if heard_transcript:
            res.isGood = True
            res.utterance = self.last_transcript

        self.heard_transcript_event.clear()
        if not was_running:
            self.streaming_transcriber.stop()
            self.streaming_transcriber.deregister_hints(req.hint_phrases)
        else:
            if len(req.hint_phrases) > 0:
                self.streaming_transcriber.deregister_hints(req.hint_phrases)
                self.streaming_transcriber.stop()
                self.streaming_transcriber.request_start()
        return res

    def transcript_handler(self, transcript, confidence):
        print("{}\n(Confidence: {:.2f})".format(transcript, confidence))
        self.pub.publish(String(transcript))
        self.last_transcript = transcript
        self.heard_transcript_event.set()


def main():
    # Instantiate ROS node.
    rospy.init_node('google_speech', anonymous=False)

    # Speech context TODO
    speech_context = []

    use_shared_mic = rospy.get_param("~use_shared_microphone", False)
    if use_shared_mic:
        stream_type = audio_stream.SharedMicrophoneStreamGenerator
    else:
        stream_type = audio_stream.MicrophoneStream

    context_phrases = rospy.get_param("~hint_phrases", [])
    speech_context += context_phrases
    transcriber = StreamingTranscriber(stream_type, context_phrases)
    ros_wrapper = StreamingTranscriberRosWrapper(transcriber)
    if rospy.get_param("~start_running", True):
        transcriber.request_start()
    rospy.spin()


if __name__ == '__main__':
    main()
